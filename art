int numParticles = 500; // 粒子数を500に設定
Particle[] particles = new Particle[numParticles];
float angleX = 0;
float angleY = 0;
float zoom = 200;
boolean attract = false;
int attractStartTime;
int attractDuration = 5000;
float attractStrength = 0.001;
PVector attractPoint;
Star[] stars; // 星を表す配列
int numStars = 1000; // 星の数
int buttonX, buttonY, buttonW, buttonH; // ボタンの位置とサイズ

void setup() {
  size(800, 600, P3D);
  stars = new Star[numStars]; // 星の配列を初期化
  for (int i = 0; i < numStars; i++) {
    stars[i] = new Star();
  }
  for (int i = 0; i < numParticles; i++) {
    particles[i] = createRandomParticle();
  }
  attractPoint = new PVector(0, 0, 0);
  
  // ボタンの位置とサイズを設定
  buttonW = 100;
  buttonH = 50;
  buttonX = width - buttonW - 20;
  buttonY = height - buttonH - 20;
}

void draw() {
  background(0);
  
  // 星を描画
  for (Star star : stars) {
    star.display();
  }
  
  lights();
  translate(width / 2, height / 2, -zoom);
  rotateX(angleX);
  rotateY(angleY);
  
  if (attract) {
    // Update attractPoint to the mouse position
    attractPoint = new PVector(mouseX - width / 2, mouseY - height / 2, 0);
  }
  
  for (Particle p : particles) {
    if (attract) {
      p.attractToPoint(attractPoint);
    }
    if (frameCount % 2 == 0) { 
      p.update();
    }
    p.display();
  }
  
  // 2Dモードに戻ってボタンを描画
  hint(DISABLE_DEPTH_TEST);
  camera();
  drawButton();
  hint(ENABLE_DEPTH_TEST);
}

void mouseDragged() {
  angleY += (mouseX - pmouseX) * 0.01;
  angleX -= (mouseY - pmouseY) * 0.01;
}

void mouseWheel(MouseEvent event) {
  zoom += event.getCount() * 10;
}

void mousePressed() {
  // ボタンが押されたかをチェック
  if (mouseX > buttonX && mouseX < buttonX + buttonW && mouseY > buttonY && mouseY < buttonY + buttonH) {
    resetScene();
  } else {
    attract = true;
    attractStartTime = millis();
    for (Particle p : particles) {
      p.col = color(random(255), random(255), random(255)); // Change color
    }
  }
}

void mouseReleased() {
  attract = false;
}

Particle createRandomParticle() {
  int type = floor(random(9)); // 0 = Sphere, 1 = Rect, 2 = Triangle, 3 = Star, 4 = Cube, 5 = Pyramid, 6 = Cylinder, 7 = Prism, 8 = Hexagon
  switch(type) {
    case 0:
      return new SphereParticle();
    case 1:
      return new RectParticle();
    case 2:
      return new TriangleParticle();
    case 3:
      return new StarParticle();
    case 4:
      return new CubeParticle();
    case 5:
      return new PyramidParticle();
    case 6:
      return new CylinderParticle();
    case 7:
      return new PrismParticle();
    case 8:
      return new HexagonParticle();
    default:
      return new SphereParticle();
  }
}

void resetScene() {
  for (Particle p : particles) {
    p.reset();
  }
  angleX = 0;
  angleY = 0;
  zoom = 200;
}

// ボタンを描画する関数
void drawButton() {
  fill(200);
  rect(buttonX, buttonY, buttonW, buttonH);
  fill(0);
  textSize(20);
  textAlign(CENTER, CENTER);
  text("Reset", buttonX + buttonW / 2, buttonY + buttonH / 2);
}

abstract class Particle {
  PVector position;
  PVector velocity;
  PVector acceleration;
  float lifespan;
  color col;
  float size; // 追加: サイズ属性
  float maxSpeed = 7; // 追加: 最大速度

  Particle() {
    reset();
  }

  void update() {
    velocity.add(acceleration);
    velocity.limit(maxSpeed); // 速度を最大速度に制限
    position.add(velocity);
    acceleration.mult(0);
    bounceWithinBounds(); // 追加: 画面内に留まるように速度を反転
  }

  abstract void display();

  void applyForce(PVector force) {
    acceleration.add(force);
  }

  void attractToPoint(PVector point) {
    PVector force = PVector.sub(point, position);
    force.mult(attractStrength);
    applyForce(force);
  }

  void bounceWithinBounds() {
    if (position.x < -width / 2 || position.x > width / 2) {
      velocity.x *= -1;
      position.x = constrain(position.x, -width / 2, width / 2);
    }
    if (position.y < -height / 2 || position.y > height / 2) {
      velocity.y *= -1;
      position.y = constrain(position.y, -height / 2, height / 2);
    }
    if (position.z < -200 || position.z > 200) {
      velocity.z *= -1;
      position.z = constrain(position.z, -200, 200);
    }
  }

  void reset() {
    position = new PVector(random(-width / 2, width / 2), random(-height / 2, height / 2), random(-200, 200));
    velocity = new PVector(random(-1, 1), random(-1, 1), random(-1, 1));
    acceleration = new PVector(0, 0, 0);
    lifespan = 500;
    col = color(random(255), random(255), random(255));
    size = random(5, 15); // 追加: ランダムサイズ設定
  }
}

class SphereParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    sphere(size);
    popMatrix();
  }
}

class RectParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    rect(0, 0, size, size);
    popMatrix();
  }
}

class TriangleParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    triangle(-size/2, size/2, size/2, size/2, 0, -size/2);
    popMatrix();
  }
}

class StarParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    star(0, 0, size/2, size, 5);
    popMatrix();
  }

  void star(float x, float y, float radius1, float radius2, int npoints) {
    float angle = TWO_PI / npoints;
    float halfAngle = angle / 2.0;
    beginShape();
    for (float a = 0; a < TWO_PI; a += angle) {
      float sx = x + cos(a) * radius2;
      float sy = y + sin(a) * radius2;
      vertex(sx, sy);
      sx = x + cos(a + halfAngle) * radius1;
      sy = y + sin(a + halfAngle) * radius1;
      vertex(sx, sy);
    }
    endShape(CLOSE);
  }
}

class CubeParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    box(size);
    popMatrix();
  }
}

class PyramidParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    pyramid(size, size);
    popMatrix();
  }

  void pyramid(float baseSize, float height) {
    beginShape();
    vertex(-baseSize/2, -baseSize/2, 0);
    vertex(baseSize/2, -baseSize/2, 0);
    vertex(baseSize/2, baseSize/2, 0);
    vertex(-baseSize/2, baseSize/2, 0);
    endShape(CLOSE);

    beginShape(TRIANGLES);
    vertex(-baseSize/2, -baseSize/2, 0);
    vertex(baseSize/2, -baseSize/2, 0);
    vertex(0, 0, -height);

    vertex(baseSize/2, -baseSize/2, 0);
    vertex(baseSize/2, baseSize/2, 0);
    vertex(0, 0, -height);

    vertex(baseSize/2, baseSize/2, 0);
    vertex(-baseSize/2, baseSize/2, 0);
    vertex(0, 0, -height);

    vertex(-baseSize/2, baseSize/2, 0);
    vertex(-baseSize/2, -baseSize/2, 0);
    vertex(0, 0, -height);
    endShape(CLOSE);
  }
}

// 新しい円柱の粒子クラス
class CylinderParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    drawCylinder(size/2, size);
    popMatrix();
  }

  void drawCylinder(float r, float h) {
    int sides = 24;
    float angle = TWO_PI / sides;

    beginShape(TRIANGLE_STRIP);
    for (int i = 0; i <= sides; i++) {
      float x = r * cos(i * angle);
      float z = r * sin(i * angle);
      vertex(x, 0, z);
      vertex(x, h, z);
    }
    endShape();

    // Top cap
    beginShape();
    for (int i = 0; i < sides; i++) {
      float x = r * cos(i * angle);
      float z = r * sin(i * angle);
      vertex(x, 0, z);
    }
    endShape(CLOSE);

    // Bottom cap
    beginShape();
    for (int i = 0; i < sides; i++) {
      float x = r * cos(i * angle);
      float z = r * sin(i * angle);
      vertex(x, h, z);
    }
    endShape(CLOSE);
  }
}

// 新しいプリズムの粒子クラス
class PrismParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    drawPrism(size/2, size, 6); // 基本形が六角形のプリズム
    popMatrix();
  }

  void drawPrism(float r, float h, int sides) {
    float angle = TWO_PI / sides;

    beginShape(TRIANGLE_STRIP);
    for (int i = 0; i <= sides; i++) {
      float x = r * cos(i * angle);
      float z = r * sin(i * angle);
      vertex(x, 0, z);
      vertex(x, h, z);
    }
    endShape();

    // Top cap
    beginShape();
    for (int i = 0; i < sides; i++) {
      float x = r * cos(i * angle);
      float z = r * sin(i * angle);
      vertex(x, 0, z);
    }
    endShape(CLOSE);

    // Bottom cap
    beginShape();
    for (int i = 0; i < sides; i++) {
      float x = r * cos(i * angle);
      float z = r * sin(i * angle);
      vertex(x, h, z);
    }
    endShape(CLOSE);
  }
}

// 新しい六角形の粒子クラス
class HexagonParticle extends Particle {
  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    fill(col, 150); // 半透明の塗りつぶし
    noStroke();
    drawHexagon(size/2);
    popMatrix();
  }

  void drawHexagon(float radius) {
    float angle = TWO_PI / 6;
    beginShape();
    for (int i = 0; i < 6; i++) {
      float x = radius * cos(i * angle);
      float y = radius * sin(i * angle);
      vertex(x, y);
    }
    endShape(CLOSE);
  }
}

// 星を表すクラス
class Star {
  PVector position;
  float brightness;

  Star() {
    position = new PVector(random(-width, width), random(-height, height), random(-200, 200));
    brightness = random(100, 255);
  }

  void display() {
    pushMatrix();
    translate(position.x, position.y, position.z);
    stroke(brightness);
    point(0, 0, 0);
    popMatrix();
  }
}
